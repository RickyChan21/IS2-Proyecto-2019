#include <BearSSLHelpers.h> // libreria para conectar el modulo ESP8266
#include <CertStoreBearSSL.h>
#include <ESP8266WiFi.h> // Libreria para utilizar el Modulo ESP8266
#include <Wire.h> // Libreria para SDA(Enviar dato) y SCL 
#include "Adafruit_MQTT.h" //protocolo para la conexion del Core
#include "Adafruit_MQTT_Client.h" //protocolo para ser cliente del CORE
#define bomba 14 //definir la variable para usar el relay

//Valores prestablecidos del Core
#define WLAN_SSID       "Skynet"
#define WLAN_PASS       "2!,y^5#t5<;T$eC*zBUb4BM)'[N9Em>G"
#define HOST        "172.20.160.108"
#define PORT        1883
#define USERNAME    "username"
#define PASSWORD    "12345678" 

int rainPin = A0; // definir variable para el pin analogo
// se ajusta el valor limite
int thresholdValue = 800;

WiFiClient client; //Nombre del cliente para conectar al core
Adafruit_MQTT_Client mqtt(&client, HOST, PORT, USERNAME, PASSWORD); // funcion que toma los datos de los valores preestablecidos del core
Adafruit_MQTT_Publish humedad = Adafruit_MQTT_Publish(&mqtt, "humedad"); //definicion del topic humedad para mandar la informacion al core
Adafruit_MQTT_Publish nivelh = Adafruit_MQTT_Publish(&mqtt, "nivelh"); //definicion del topic nivelh para publicar la informacion al core

void MQTT_connect(); // Inicia la conexion al core
// el setup para verificar la conexion al core verificando los diferentes certificados 
void setup(){
  pinMode (bomba, OUTPUT); //define que pin sera salida
  pinMode(rainPin, INPUT); //define que pin tendra entrada
  Serial.begin(115200); //cantidad de baudios con los que se maneja el archivo
  WiFi.forceSleepWake(); // CONECTA SÓLO DESPUÉS DE PRIMEROS PUNTOS RESTARTS O NO SE CONECTA EN TODO
  WiFi.mode(WIFI_STA);
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) 
  {
     //Mientras no haya conexión al core, imprimira puntos (.) cada medio segundo
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("WiFi connected"); //Conexion wifi lograda
  Serial.println("IP address: "); Serial.println(WiFi.localIP());
  MQTT_connect(); //Conexión del publicador lograda
}



void loop() {
  // leer la entrada en el pin analógico 0:
  int sensorValue = analogRead(rainPin); // la variable sensorValue sera igual al pin analogo
  Serial.print(sensorValue); // se imprime el primer valor del sensor
  if(sensorValue < thresholdValue){
    Serial.println(" - Doesn't need watering");  // imprime informacion (No necesita agua)
  humedad.publish(" - Doesn't need watering"); // informacion para enviar al core (No necesita agua)
  nivelh.publish(sensorValue);  // publica información al core
  
  }
  else {
    Serial.println(" - Time to water your plant");  // informacion para enviar al core(Tiempo de ponerle agua a la planta)
     humedad.publish(" -Time to water your plant"); // informacion para enviar al core (Tiempo de ponerle agua a la planta)
  nivelh.publish(sensorValue);// publica infomación de la variable nivel.h al core
  }
  delay(10000);
}
 // Funcion para conexión al core como publicador, Verifica si la conexion con el core es satisfactoria 
  void MQTT_connect() {
  int8_t ret;
  if (mqtt.connected()) {
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect devolverá 0 para conectado
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}
